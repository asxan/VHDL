library ieee;
use ieee.std_logic_1164.all;
use ieee.numeric_std.all;
use work.mas.all;

entity Change is
	generic(N : integer := 8);
	port(
		clk : in std_logic;
		QF : out m(N - 1 downto 0);
		--QP : out m(N - 1 downto 0);
		D : in m(N - 1 downto 0);
		--CountF : out integer;
		Count : out integer
	);
end entity;

architecture beh of Change is
	function fChange (x : m) return m is
		variable r : m (N downto 0);
		variable count : integer := 0;
	begin
	
		for i in N - 1 downto 0 loop
			r(i) := x(i);
			if x(i) mod 2 = 1 then
				count := count + 1;
				r(i) := 0;
			end if;
		end loop;
		r(N) := count;
		return r;
		
	end function fChange;
	procedure pChange(variable x: in m; variable r : out m) is
		variable count : integer := 0;
	begin
	
		for i in N - 1 downto 0 loop
			r(i) := x(i);
			if x(i) mod 2 = 1 then
				count := count + 1;
				r(i) := 0;
			end if;
		end loop;
		r(N) := count;
	end procedure;
begin
	process (clk)
	variable Data : m(N - 1 downto 0);-- := (10, 11, 12, 13, 1, 2, 3, 4);
	variable res : m(N downto 0) := (others => 0);
	begin
		if rising_edge(clk) then
			Data := D;
			res := fChange(Data);
			QF <= res(N - 1 downto 0);
			Count <= res(N);
			Data := D;
			pChange(Data, res);
			QF <= res(N - 1 downto 0);
			--CountP <= res(N);
		end if;
	end process;
end architecture;